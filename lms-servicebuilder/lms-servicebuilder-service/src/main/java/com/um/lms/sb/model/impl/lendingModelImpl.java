/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.um.lms.sb.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.um.lms.sb.model.lending;
import com.um.lms.sb.model.lendingModel;
import com.um.lms.sb.model.lendingSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the lending service. Represents a row in the &quot;lms_lending&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>lendingModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link lendingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see lendingImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class lendingModelImpl
	extends BaseModelImpl<lending> implements lendingModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lending model instance should use the <code>lending</code> interface instead.
	 */
	public static final String TABLE_NAME = "lms_lending";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"lendingID", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"bookTitle", Types.BIGINT}, {"bookId", Types.BIGINT},
		{"studentId", Types.BIGINT}, {"staffId", Types.BIGINT},
		{"dueDate", Types.TIMESTAMP}, {"lateFee", Types.FLOAT},
		{"checkoutDate", Types.TIMESTAMP}, {"loanPeriod", Types.BIGINT},
		{"checkinDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lendingID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("bookTitle", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("bookId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("studentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("staffId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lateFee", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("checkoutDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("loanPeriod", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("checkinDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table lms_lending (uuid_ VARCHAR(75) null,lendingID LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,bookTitle LONG,bookId LONG,studentId LONG,staffId LONG,dueDate DATE null,lateFee DOUBLE,checkoutDate DATE null,loanPeriod LONG,checkinDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table lms_lending";

	public static final String ORDER_BY_JPQL =
		" ORDER BY lending.lendingID ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY lms_lending.lendingID ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long LENDINGID_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static lending toModel(lendingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		lending model = new lendingImpl();

		model.setUuid(soapModel.getUuid());
		model.setLendingID(soapModel.getLendingID());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setBookTitle(soapModel.getBookTitle());
		model.setBookId(soapModel.getBookId());
		model.setStudentId(soapModel.getStudentId());
		model.setStaffId(soapModel.getStaffId());
		model.setDueDate(soapModel.getDueDate());
		model.setLateFee(soapModel.getLateFee());
		model.setCheckoutDate(soapModel.getCheckoutDate());
		model.setLoanPeriod(soapModel.getLoanPeriod());
		model.setCheckinDate(soapModel.getCheckinDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<lending> toModels(lendingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<lending> models = new ArrayList<lending>(soapModels.length);

		for (lendingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public lendingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lendingID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLendingID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lendingID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return lending.class;
	}

	@Override
	public String getModelClassName() {
		return lending.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<lending, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<lending, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<lending, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((lending)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<lending, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<lending, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(lending)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<lending, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<lending, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<lending, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<lending, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<lending, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<lending, Object>>();
		Map<String, BiConsumer<lending, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<lending, ?>>();

		attributeGetterFunctions.put("uuid", lending::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<lending, String>)lending::setUuid);
		attributeGetterFunctions.put("lendingID", lending::getLendingID);
		attributeSetterBiConsumers.put(
			"lendingID", (BiConsumer<lending, Long>)lending::setLendingID);
		attributeGetterFunctions.put("groupId", lending::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<lending, Long>)lending::setGroupId);
		attributeGetterFunctions.put("companyId", lending::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<lending, Long>)lending::setCompanyId);
		attributeGetterFunctions.put("userId", lending::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<lending, Long>)lending::setUserId);
		attributeGetterFunctions.put("userName", lending::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<lending, String>)lending::setUserName);
		attributeGetterFunctions.put("createDate", lending::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<lending, Date>)lending::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", lending::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<lending, Date>)lending::setModifiedDate);
		attributeGetterFunctions.put("bookTitle", lending::getBookTitle);
		attributeSetterBiConsumers.put(
			"bookTitle", (BiConsumer<lending, Long>)lending::setBookTitle);
		attributeGetterFunctions.put("bookId", lending::getBookId);
		attributeSetterBiConsumers.put(
			"bookId", (BiConsumer<lending, Long>)lending::setBookId);
		attributeGetterFunctions.put("studentId", lending::getStudentId);
		attributeSetterBiConsumers.put(
			"studentId", (BiConsumer<lending, Long>)lending::setStudentId);
		attributeGetterFunctions.put("staffId", lending::getStaffId);
		attributeSetterBiConsumers.put(
			"staffId", (BiConsumer<lending, Long>)lending::setStaffId);
		attributeGetterFunctions.put("dueDate", lending::getDueDate);
		attributeSetterBiConsumers.put(
			"dueDate", (BiConsumer<lending, Date>)lending::setDueDate);
		attributeGetterFunctions.put("lateFee", lending::getLateFee);
		attributeSetterBiConsumers.put(
			"lateFee", (BiConsumer<lending, Float>)lending::setLateFee);
		attributeGetterFunctions.put("checkoutDate", lending::getCheckoutDate);
		attributeSetterBiConsumers.put(
			"checkoutDate",
			(BiConsumer<lending, Date>)lending::setCheckoutDate);
		attributeGetterFunctions.put("loanPeriod", lending::getLoanPeriod);
		attributeSetterBiConsumers.put(
			"loanPeriod", (BiConsumer<lending, Long>)lending::setLoanPeriod);
		attributeGetterFunctions.put("checkinDate", lending::getCheckinDate);
		attributeSetterBiConsumers.put(
			"checkinDate", (BiConsumer<lending, Date>)lending::setCheckinDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getLendingID() {
		return _lendingID;
	}

	@Override
	public void setLendingID(long lendingID) {
		_lendingID = lendingID;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getBookTitle() {
		return _bookTitle;
	}

	@Override
	public void setBookTitle(long bookTitle) {
		_bookTitle = bookTitle;
	}

	@JSON
	@Override
	public long getBookId() {
		return _bookId;
	}

	@Override
	public void setBookId(long bookId) {
		_bookId = bookId;
	}

	@JSON
	@Override
	public long getStudentId() {
		return _studentId;
	}

	@Override
	public void setStudentId(long studentId) {
		_studentId = studentId;
	}

	@JSON
	@Override
	public long getStaffId() {
		return _staffId;
	}

	@Override
	public void setStaffId(long staffId) {
		_staffId = staffId;
	}

	@JSON
	@Override
	public Date getDueDate() {
		return _dueDate;
	}

	@Override
	public void setDueDate(Date dueDate) {
		_dueDate = dueDate;
	}

	@JSON
	@Override
	public float getLateFee() {
		return _lateFee;
	}

	@Override
	public void setLateFee(float lateFee) {
		_lateFee = lateFee;
	}

	@JSON
	@Override
	public Date getCheckoutDate() {
		return _checkoutDate;
	}

	@Override
	public void setCheckoutDate(Date checkoutDate) {
		_checkoutDate = checkoutDate;
	}

	@JSON
	@Override
	public long getLoanPeriod() {
		return _loanPeriod;
	}

	@Override
	public void setLoanPeriod(long loanPeriod) {
		_loanPeriod = loanPeriod;
	}

	@JSON
	@Override
	public Date getCheckinDate() {
		return _checkinDate;
	}

	@Override
	public void setCheckinDate(Date checkinDate) {
		_checkinDate = checkinDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(lending.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), lending.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public lending toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (lending)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		lendingImpl lendingImpl = new lendingImpl();

		lendingImpl.setUuid(getUuid());
		lendingImpl.setLendingID(getLendingID());
		lendingImpl.setGroupId(getGroupId());
		lendingImpl.setCompanyId(getCompanyId());
		lendingImpl.setUserId(getUserId());
		lendingImpl.setUserName(getUserName());
		lendingImpl.setCreateDate(getCreateDate());
		lendingImpl.setModifiedDate(getModifiedDate());
		lendingImpl.setBookTitle(getBookTitle());
		lendingImpl.setBookId(getBookId());
		lendingImpl.setStudentId(getStudentId());
		lendingImpl.setStaffId(getStaffId());
		lendingImpl.setDueDate(getDueDate());
		lendingImpl.setLateFee(getLateFee());
		lendingImpl.setCheckoutDate(getCheckoutDate());
		lendingImpl.setLoanPeriod(getLoanPeriod());
		lendingImpl.setCheckinDate(getCheckinDate());

		lendingImpl.resetOriginalValues();

		return lendingImpl;
	}

	@Override
	public int compareTo(lending lending) {
		long primaryKey = lending.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof lending)) {
			return false;
		}

		lending lending = (lending)obj;

		long primaryKey = lending.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		lendingModelImpl lendingModelImpl = this;

		lendingModelImpl._originalUuid = lendingModelImpl._uuid;

		lendingModelImpl._originalGroupId = lendingModelImpl._groupId;

		lendingModelImpl._setOriginalGroupId = false;

		lendingModelImpl._originalCompanyId = lendingModelImpl._companyId;

		lendingModelImpl._setOriginalCompanyId = false;

		lendingModelImpl._setModifiedDate = false;

		lendingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<lending> toCacheModel() {
		lendingCacheModel lendingCacheModel = new lendingCacheModel();

		lendingCacheModel.uuid = getUuid();

		String uuid = lendingCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			lendingCacheModel.uuid = null;
		}

		lendingCacheModel.lendingID = getLendingID();

		lendingCacheModel.groupId = getGroupId();

		lendingCacheModel.companyId = getCompanyId();

		lendingCacheModel.userId = getUserId();

		lendingCacheModel.userName = getUserName();

		String userName = lendingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			lendingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			lendingCacheModel.createDate = createDate.getTime();
		}
		else {
			lendingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			lendingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			lendingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		lendingCacheModel.bookTitle = getBookTitle();

		lendingCacheModel.bookId = getBookId();

		lendingCacheModel.studentId = getStudentId();

		lendingCacheModel.staffId = getStaffId();

		Date dueDate = getDueDate();

		if (dueDate != null) {
			lendingCacheModel.dueDate = dueDate.getTime();
		}
		else {
			lendingCacheModel.dueDate = Long.MIN_VALUE;
		}

		lendingCacheModel.lateFee = getLateFee();

		Date checkoutDate = getCheckoutDate();

		if (checkoutDate != null) {
			lendingCacheModel.checkoutDate = checkoutDate.getTime();
		}
		else {
			lendingCacheModel.checkoutDate = Long.MIN_VALUE;
		}

		lendingCacheModel.loanPeriod = getLoanPeriod();

		Date checkinDate = getCheckinDate();

		if (checkinDate != null) {
			lendingCacheModel.checkinDate = checkinDate.getTime();
		}
		else {
			lendingCacheModel.checkinDate = Long.MIN_VALUE;
		}

		return lendingCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<lending, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<lending, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<lending, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((lending)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<lending, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<lending, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<lending, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((lending)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		lending.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		lending.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _lendingID;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _bookTitle;
	private long _bookId;
	private long _studentId;
	private long _staffId;
	private Date _dueDate;
	private float _lateFee;
	private Date _checkoutDate;
	private long _loanPeriod;
	private Date _checkinDate;
	private long _columnBitmask;
	private lending _escapedModel;

}