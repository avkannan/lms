/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.um.lms.sb.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.um.lms.sb.model.book;
import com.um.lms.sb.model.bookModel;
import com.um.lms.sb.model.bookSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the book service. Represents a row in the &quot;lms_book&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>bookModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link bookImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see bookImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class bookModelImpl extends BaseModelImpl<book> implements bookModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a book model instance should use the <code>book</code> interface instead.
	 */
	public static final String TABLE_NAME = "lms_book";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"bookID", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"authorID", Types.BIGINT}, {"publicationID", Types.BIGINT},
		{"edition", Types.VARCHAR}, {"title", Types.INTEGER},
		{"quantity", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bookID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("authorID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("publicationID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("edition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("quantity", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table lms_book (uuid_ VARCHAR(75) null,bookID LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,authorID LONG,publicationID LONG,edition VARCHAR(75) null,title INTEGER,quantity INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table lms_book";

	public static final String ORDER_BY_JPQL = " ORDER BY book.title ASC";

	public static final String ORDER_BY_SQL = " ORDER BY lms_book.title ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long TITLE_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static book toModel(bookSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		book model = new bookImpl();

		model.setUuid(soapModel.getUuid());
		model.setBookID(soapModel.getBookID());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAuthorID(soapModel.getAuthorID());
		model.setPublicationID(soapModel.getPublicationID());
		model.setEdition(soapModel.getEdition());
		model.setTitle(soapModel.getTitle());
		model.setQuantity(soapModel.getQuantity());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<book> toModels(bookSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<book> models = new ArrayList<book>(soapModels.length);

		for (bookSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public bookModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bookID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBookID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bookID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return book.class;
	}

	@Override
	public String getModelClassName() {
		return book.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<book, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<book, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<book, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((book)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<book, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<book, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((book)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<book, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<book, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<book, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<book, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<book, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<book, Object>>();
		Map<String, BiConsumer<book, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<book, ?>>();

		attributeGetterFunctions.put("uuid", book::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<book, String>)book::setUuid);
		attributeGetterFunctions.put("bookID", book::getBookID);
		attributeSetterBiConsumers.put(
			"bookID", (BiConsumer<book, Long>)book::setBookID);
		attributeGetterFunctions.put("groupId", book::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<book, Long>)book::setGroupId);
		attributeGetterFunctions.put("companyId", book::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<book, Long>)book::setCompanyId);
		attributeGetterFunctions.put("userId", book::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<book, Long>)book::setUserId);
		attributeGetterFunctions.put("userName", book::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<book, String>)book::setUserName);
		attributeGetterFunctions.put("createDate", book::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<book, Date>)book::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", book::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<book, Date>)book::setModifiedDate);
		attributeGetterFunctions.put("authorID", book::getAuthorID);
		attributeSetterBiConsumers.put(
			"authorID", (BiConsumer<book, Long>)book::setAuthorID);
		attributeGetterFunctions.put("publicationID", book::getPublicationID);
		attributeSetterBiConsumers.put(
			"publicationID", (BiConsumer<book, Long>)book::setPublicationID);
		attributeGetterFunctions.put("edition", book::getEdition);
		attributeSetterBiConsumers.put(
			"edition", (BiConsumer<book, String>)book::setEdition);
		attributeGetterFunctions.put("title", book::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<book, Integer>)book::setTitle);
		attributeGetterFunctions.put("quantity", book::getQuantity);
		attributeSetterBiConsumers.put(
			"quantity", (BiConsumer<book, Integer>)book::setQuantity);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getBookID() {
		return _bookID;
	}

	@Override
	public void setBookID(long bookID) {
		_bookID = bookID;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getAuthorID() {
		return _authorID;
	}

	@Override
	public void setAuthorID(long authorID) {
		_authorID = authorID;
	}

	@JSON
	@Override
	public long getPublicationID() {
		return _publicationID;
	}

	@Override
	public void setPublicationID(long publicationID) {
		_publicationID = publicationID;
	}

	@JSON
	@Override
	public String getEdition() {
		if (_edition == null) {
			return "";
		}
		else {
			return _edition;
		}
	}

	@Override
	public void setEdition(String edition) {
		_edition = edition;
	}

	@JSON
	@Override
	public int getTitle() {
		return _title;
	}

	@Override
	public void setTitle(int title) {
		_columnBitmask = -1L;

		_title = title;
	}

	@JSON
	@Override
	public int getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(int quantity) {
		_quantity = quantity;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(book.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), book.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public book toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (book)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		bookImpl bookImpl = new bookImpl();

		bookImpl.setUuid(getUuid());
		bookImpl.setBookID(getBookID());
		bookImpl.setGroupId(getGroupId());
		bookImpl.setCompanyId(getCompanyId());
		bookImpl.setUserId(getUserId());
		bookImpl.setUserName(getUserName());
		bookImpl.setCreateDate(getCreateDate());
		bookImpl.setModifiedDate(getModifiedDate());
		bookImpl.setAuthorID(getAuthorID());
		bookImpl.setPublicationID(getPublicationID());
		bookImpl.setEdition(getEdition());
		bookImpl.setTitle(getTitle());
		bookImpl.setQuantity(getQuantity());

		bookImpl.resetOriginalValues();

		return bookImpl;
	}

	@Override
	public int compareTo(book book) {
		int value = 0;

		if (getTitle() < book.getTitle()) {
			value = -1;
		}
		else if (getTitle() > book.getTitle()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof book)) {
			return false;
		}

		book book = (book)obj;

		long primaryKey = book.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		bookModelImpl bookModelImpl = this;

		bookModelImpl._originalUuid = bookModelImpl._uuid;

		bookModelImpl._originalGroupId = bookModelImpl._groupId;

		bookModelImpl._setOriginalGroupId = false;

		bookModelImpl._originalCompanyId = bookModelImpl._companyId;

		bookModelImpl._setOriginalCompanyId = false;

		bookModelImpl._setModifiedDate = false;

		bookModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<book> toCacheModel() {
		bookCacheModel bookCacheModel = new bookCacheModel();

		bookCacheModel.uuid = getUuid();

		String uuid = bookCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			bookCacheModel.uuid = null;
		}

		bookCacheModel.bookID = getBookID();

		bookCacheModel.groupId = getGroupId();

		bookCacheModel.companyId = getCompanyId();

		bookCacheModel.userId = getUserId();

		bookCacheModel.userName = getUserName();

		String userName = bookCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			bookCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			bookCacheModel.createDate = createDate.getTime();
		}
		else {
			bookCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			bookCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			bookCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		bookCacheModel.authorID = getAuthorID();

		bookCacheModel.publicationID = getPublicationID();

		bookCacheModel.edition = getEdition();

		String edition = bookCacheModel.edition;

		if ((edition != null) && (edition.length() == 0)) {
			bookCacheModel.edition = null;
		}

		bookCacheModel.title = getTitle();

		bookCacheModel.quantity = getQuantity();

		return bookCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<book, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<book, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<book, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((book)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<book, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<book, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<book, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((book)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = book.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		book.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _bookID;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _authorID;
	private long _publicationID;
	private String _edition;
	private int _title;
	private int _quantity;
	private long _columnBitmask;
	private book _escapedModel;

}