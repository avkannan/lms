/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.um.lms.sb.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.um.lms.sb.model.publication;
import com.um.lms.sb.model.publicationModel;
import com.um.lms.sb.model.publicationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the publication service. Represents a row in the &quot;lms_publication&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>publicationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link publicationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see publicationImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class publicationModelImpl
	extends BaseModelImpl<publication> implements publicationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a publication model instance should use the <code>publication</code> interface instead.
	 */
	public static final String TABLE_NAME = "lms_publication";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"publicationID", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"publicationName", Types.VARCHAR}, {"addressLine1", Types.VARCHAR},
		{"addressLine2", Types.VARCHAR}, {"city", Types.VARCHAR},
		{"zip", Types.VARCHAR}, {"state_", Types.VARCHAR},
		{"country", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publicationID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("publicationName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressLine1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressLine2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("country", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table lms_publication (uuid_ VARCHAR(75) null,publicationID LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,publicationName VARCHAR(75) null,addressLine1 VARCHAR(75) null,addressLine2 VARCHAR(75) null,city VARCHAR(75) null,zip VARCHAR(75) null,state_ VARCHAR(75) null,country VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table lms_publication";

	public static final String ORDER_BY_JPQL =
		" ORDER BY publication.publicationName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY lms_publication.publicationName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long PUBLICATIONNAME_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static publication toModel(publicationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		publication model = new publicationImpl();

		model.setUuid(soapModel.getUuid());
		model.setPublicationID(soapModel.getPublicationID());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setPublicationName(soapModel.getPublicationName());
		model.setAddressLine1(soapModel.getAddressLine1());
		model.setAddressLine2(soapModel.getAddressLine2());
		model.setCity(soapModel.getCity());
		model.setZip(soapModel.getZip());
		model.setState(soapModel.getState());
		model.setCountry(soapModel.getCountry());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<publication> toModels(publicationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<publication> models = new ArrayList<publication>(
			soapModels.length);

		for (publicationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public publicationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _publicationID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPublicationID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _publicationID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return publication.class;
	}

	@Override
	public String getModelClassName() {
		return publication.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<publication, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<publication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<publication, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((publication)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<publication, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<publication, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(publication)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<publication, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<publication, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<publication, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<publication, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<publication, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<publication, Object>>();
		Map<String, BiConsumer<publication, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<publication, ?>>();

		attributeGetterFunctions.put("uuid", publication::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<publication, String>)publication::setUuid);
		attributeGetterFunctions.put(
			"publicationID", publication::getPublicationID);
		attributeSetterBiConsumers.put(
			"publicationID",
			(BiConsumer<publication, Long>)publication::setPublicationID);
		attributeGetterFunctions.put("groupId", publication::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<publication, Long>)publication::setGroupId);
		attributeGetterFunctions.put("companyId", publication::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<publication, Long>)publication::setCompanyId);
		attributeGetterFunctions.put("userId", publication::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<publication, Long>)publication::setUserId);
		attributeGetterFunctions.put("userName", publication::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<publication, String>)publication::setUserName);
		attributeGetterFunctions.put("createDate", publication::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<publication, Date>)publication::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", publication::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<publication, Date>)publication::setModifiedDate);
		attributeGetterFunctions.put(
			"publicationName", publication::getPublicationName);
		attributeSetterBiConsumers.put(
			"publicationName",
			(BiConsumer<publication, String>)publication::setPublicationName);
		attributeGetterFunctions.put(
			"addressLine1", publication::getAddressLine1);
		attributeSetterBiConsumers.put(
			"addressLine1",
			(BiConsumer<publication, String>)publication::setAddressLine1);
		attributeGetterFunctions.put(
			"addressLine2", publication::getAddressLine2);
		attributeSetterBiConsumers.put(
			"addressLine2",
			(BiConsumer<publication, String>)publication::setAddressLine2);
		attributeGetterFunctions.put("city", publication::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<publication, String>)publication::setCity);
		attributeGetterFunctions.put("zip", publication::getZip);
		attributeSetterBiConsumers.put(
			"zip", (BiConsumer<publication, String>)publication::setZip);
		attributeGetterFunctions.put("state", publication::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<publication, String>)publication::setState);
		attributeGetterFunctions.put("country", publication::getCountry);
		attributeSetterBiConsumers.put(
			"country",
			(BiConsumer<publication, String>)publication::setCountry);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPublicationID() {
		return _publicationID;
	}

	@Override
	public void setPublicationID(long publicationID) {
		_publicationID = publicationID;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getPublicationName() {
		if (_publicationName == null) {
			return "";
		}
		else {
			return _publicationName;
		}
	}

	@Override
	public void setPublicationName(String publicationName) {
		_columnBitmask = -1L;

		_publicationName = publicationName;
	}

	@JSON
	@Override
	public String getAddressLine1() {
		if (_addressLine1 == null) {
			return "";
		}
		else {
			return _addressLine1;
		}
	}

	@Override
	public void setAddressLine1(String addressLine1) {
		_addressLine1 = addressLine1;
	}

	@JSON
	@Override
	public String getAddressLine2() {
		if (_addressLine2 == null) {
			return "";
		}
		else {
			return _addressLine2;
		}
	}

	@Override
	public void setAddressLine2(String addressLine2) {
		_addressLine2 = addressLine2;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@JSON
	@Override
	public String getZip() {
		if (_zip == null) {
			return "";
		}
		else {
			return _zip;
		}
	}

	@Override
	public void setZip(String zip) {
		_zip = zip;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@JSON
	@Override
	public String getCountry() {
		if (_country == null) {
			return "";
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_country = country;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(publication.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), publication.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public publication toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (publication)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		publicationImpl publicationImpl = new publicationImpl();

		publicationImpl.setUuid(getUuid());
		publicationImpl.setPublicationID(getPublicationID());
		publicationImpl.setGroupId(getGroupId());
		publicationImpl.setCompanyId(getCompanyId());
		publicationImpl.setUserId(getUserId());
		publicationImpl.setUserName(getUserName());
		publicationImpl.setCreateDate(getCreateDate());
		publicationImpl.setModifiedDate(getModifiedDate());
		publicationImpl.setPublicationName(getPublicationName());
		publicationImpl.setAddressLine1(getAddressLine1());
		publicationImpl.setAddressLine2(getAddressLine2());
		publicationImpl.setCity(getCity());
		publicationImpl.setZip(getZip());
		publicationImpl.setState(getState());
		publicationImpl.setCountry(getCountry());

		publicationImpl.resetOriginalValues();

		return publicationImpl;
	}

	@Override
	public int compareTo(publication publication) {
		int value = 0;

		value = getPublicationName().compareTo(
			publication.getPublicationName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof publication)) {
			return false;
		}

		publication publication = (publication)obj;

		long primaryKey = publication.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		publicationModelImpl publicationModelImpl = this;

		publicationModelImpl._originalUuid = publicationModelImpl._uuid;

		publicationModelImpl._originalGroupId = publicationModelImpl._groupId;

		publicationModelImpl._setOriginalGroupId = false;

		publicationModelImpl._originalCompanyId =
			publicationModelImpl._companyId;

		publicationModelImpl._setOriginalCompanyId = false;

		publicationModelImpl._setModifiedDate = false;

		publicationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<publication> toCacheModel() {
		publicationCacheModel publicationCacheModel =
			new publicationCacheModel();

		publicationCacheModel.uuid = getUuid();

		String uuid = publicationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			publicationCacheModel.uuid = null;
		}

		publicationCacheModel.publicationID = getPublicationID();

		publicationCacheModel.groupId = getGroupId();

		publicationCacheModel.companyId = getCompanyId();

		publicationCacheModel.userId = getUserId();

		publicationCacheModel.userName = getUserName();

		String userName = publicationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			publicationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			publicationCacheModel.createDate = createDate.getTime();
		}
		else {
			publicationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			publicationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			publicationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		publicationCacheModel.publicationName = getPublicationName();

		String publicationName = publicationCacheModel.publicationName;

		if ((publicationName != null) && (publicationName.length() == 0)) {
			publicationCacheModel.publicationName = null;
		}

		publicationCacheModel.addressLine1 = getAddressLine1();

		String addressLine1 = publicationCacheModel.addressLine1;

		if ((addressLine1 != null) && (addressLine1.length() == 0)) {
			publicationCacheModel.addressLine1 = null;
		}

		publicationCacheModel.addressLine2 = getAddressLine2();

		String addressLine2 = publicationCacheModel.addressLine2;

		if ((addressLine2 != null) && (addressLine2.length() == 0)) {
			publicationCacheModel.addressLine2 = null;
		}

		publicationCacheModel.city = getCity();

		String city = publicationCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			publicationCacheModel.city = null;
		}

		publicationCacheModel.zip = getZip();

		String zip = publicationCacheModel.zip;

		if ((zip != null) && (zip.length() == 0)) {
			publicationCacheModel.zip = null;
		}

		publicationCacheModel.state = getState();

		String state = publicationCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			publicationCacheModel.state = null;
		}

		publicationCacheModel.country = getCountry();

		String country = publicationCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			publicationCacheModel.country = null;
		}

		return publicationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<publication, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<publication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<publication, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((publication)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<publication, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<publication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<publication, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((publication)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		publication.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		publication.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _publicationID;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _publicationName;
	private String _addressLine1;
	private String _addressLine2;
	private String _city;
	private String _zip;
	private String _state;
	private String _country;
	private long _columnBitmask;
	private publication _escapedModel;

}